/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Forwarder } from "./Forwarder";

export class ForwarderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  connect(signer: Signer): ForwarderFactory {
    return super.connect(signer) as ForwarderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "forward",
    outputs: [
      {
        internalType: "bytes",
        name: "returnValue",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x00010000000000020000008003000039000000400030043f0000000003010019000000600330027000000034033001970000000102200190000000630000c13d000000040230008c000000be0000413d000000000201043b0000003602200197000000370220009c000000be0000c13d000000040230008a000000400220008c000000be0000413d0000000402100370000000000202043b0000003804200197000000380220009c000000be0000213d0000002402100370000000000502043b000000390250009c000000be0000213d00000023025000390000003a06000041000000000732004b000000000700001900000000070680190000003a02200197000000000802004b00000000060080190000003a0220009c00000000020700190000000002066019000000000202004b000000be0000c13d0000000406500039000000000261034f000000000202043b000000390720009c000000be0000213d00000000052500190000002405500039000000000335004b000000be0000213d0000002003600039000000000131034f0000001f0320018f00000005052002720000003e0000613d00000000060000190000000507600210000000000871034f000000000808043b000000800770003900000000008704350000000106600039000000000756004b000000360000413d000000000603004b0000004d0000613d0000000505500210000000000151034f00000003033002100000008005500039000000000605043300000000063601cf000000000636022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000161019f000000000015043500000080012000390000000000010435000000600900003900000000030004160000000001000414000000040540008c000000a00000613d000100000009001d0000003405000041000000340610009c0000000001058019000000340620009c00000000020580190000006002200210000000c001100210000000000121019f000000000203004b0000006b0000c13d0000003c011001c7000000000204001900cb00c60000040f0000006f0000013d0000000001000416000000000101004b000000be0000c13d0000002001000039000001000010044300000120000004430000003501000041000000cc0001042e0000003b011001c70000800902000039000000000500001900cb00c60000040f00000000030100190000006003300270000000340530019800000001090000290000009e0000613d0000001f035000390000003d033001970000003f033000390000003e03300197000000400900043d0000000003390019000000000493004b00000000040000190000000104004039000000390630009c000000c00000213d0000000104400190000000c00000c13d000000400030043f0000001f0350018f000000000459043600000005055002720000008f0000613d000000000600001900000005076002100000000008740019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000870000413d000000000603004b0000009e0000613d0000000505500210000000000151034f00000000045400190000000303300210000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f00000000001404350000000101200190000000be0000613d000000400100043d00000020020000390000000003210436000000000209043300000000002304350000004003100039000000000402004b000000b00000613d000000000400001900000000053400190000002004400039000000000694001900000000060604330000000000650435000000000524004b000000a90000413d000000000332001900000000000304350000005f02200039000000200300008a000000000232016f0000003403000041000000340420009c0000000002038019000000340410009c000000000103801900000040011002100000006002200210000000000112019f000000cc0001042e0000000001000019000000cd000104300000003f0100004100000000001004350000004101000039000000040010043f0000004001000041000000cd00010430000000c9002104210000000102000039000000000001042d0000000002000019000000000001042d000000cb00000432000000cc0001042e000000cd000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff000000000000000000000000000000000000000000000000000000006fadcf7200000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff80000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000003ffffffe04e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000edead2edcef56fb34e86e951538eea9814d8d8ff1372245e7f81fd0ad96ee6ea";
