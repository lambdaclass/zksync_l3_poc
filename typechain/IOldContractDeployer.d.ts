/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOldContractDeployerInterface extends ethers.utils.Interface {
  functions: {
    "forceDeployOnAddresses(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "forceDeployOnAddresses",
    values: [
      {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "forceDeployOnAddresses",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOldContractDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOldContractDeployerInterface;

  functions: {
    forceDeployOnAddresses(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceDeployOnAddresses(tuple[])"(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  forceDeployOnAddresses(
    _deployParams: {
      bytecodeHash: BytesLike;
      newAddress: string;
      value: BigNumberish;
      input: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceDeployOnAddresses(tuple[])"(
    _deployParams: {
      bytecodeHash: BytesLike;
      newAddress: string;
      value: BigNumberish;
      input: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    forceDeployOnAddresses(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "forceDeployOnAddresses(tuple[])"(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    forceDeployOnAddresses(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceDeployOnAddresses(tuple[])"(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    forceDeployOnAddresses(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceDeployOnAddresses(tuple[])"(
      _deployParams: {
        bytecodeHash: BytesLike;
        newAddress: string;
        value: BigNumberish;
        input: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
