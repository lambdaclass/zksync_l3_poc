/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RevertFallback } from "./RevertFallback";

export class RevertFallbackFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<RevertFallback> {
    return super.deploy(overrides || {}) as Promise<RevertFallback>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RevertFallback {
    return super.attach(address) as RevertFallback;
  }
  connect(signer: Signer): RevertFallbackFactory {
    return super.connect(signer) as RevertFallbackFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertFallback {
    return new Contract(address, _abi, signerOrProvider) as RevertFallback;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fd5f17d0cb6b58db91e2667b4db74232ea183426aff780a8104a456f745ca11";
