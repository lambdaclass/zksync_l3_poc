/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAdminInterface extends ethers.utils.Interface {
  functions: {
    "acceptAdmin()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "executeUpgrade(tuple)": FunctionFragment;
    "freezeDiamond()": FunctionFragment;
    "getName()": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPorterAvailability(bool)": FunctionFragment;
    "setPriorityTxMaxGasLimit(uint256)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriorityTxMaxGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteUpgrade(tuple)": EventFragment;
    "Freeze()": EventFragment;
    "IsPorterAvailableStatusUpdate(bool)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewPendingAdmin(address,address)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewPriorityTxMaxGasLimit(uint256,uint256)": EventFragment;
    "Unfreeze()": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IsPorterAvailableStatusUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityTxMaxGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export class IAdmin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAdminInterface;

  functions: {
    acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeUpgrade((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "freezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  executeUpgrade(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeUpgrade((tuple[],address,bytes))"(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "freezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  setPendingAdmin(
    _newPendingAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingAdmin(address)"(
    _newPendingAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPorterAvailability(
    _zkPorterIsAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPorterAvailability(bool)"(
    _zkPorterIsAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriorityTxMaxGasLimit(
    _newPriorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriorityTxMaxGasLimit(uint256)"(
    _newPriorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidator(address,bool)"(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    "acceptAdmin()"(overrides?: CallOverrides): Promise<void>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "executeUpgrade((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    freezeDiamond(overrides?: CallOverrides): Promise<void>;

    "freezeDiamond()"(overrides?: CallOverrides): Promise<void>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    "unfreezeDiamond()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ExecuteUpgrade(diamondCut: null): EventFilter;

    Freeze(): EventFilter;

    IsPorterAvailableStatusUpdate(isPorterAvailable: null): EventFilter;

    NewAdmin(oldAdmin: string | null, newAdmin: string | null): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewPendingAdmin(
      oldPendingAdmin: string | null,
      newPendingAdmin: string | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    NewPriorityTxMaxGasLimit(
      oldPriorityTxMaxGasLimit: null,
      newPriorityTxMaxGasLimit: null
    ): EventFilter;

    Unfreeze(): EventFilter;

    ValidatorStatusUpdate(
      validatorAddress: string | null,
      isActive: null
    ): EventFilter;
  };

  estimateGas: {
    acceptAdmin(overrides?: Overrides): Promise<BigNumber>;

    "acceptAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeUpgrade((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    freezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "freezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unfreezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeUpgrade((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    freezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

    "freezeDiamond()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
