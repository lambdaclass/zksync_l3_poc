/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernanceInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "cancel(bytes32)": FunctionFragment;
    "execute(tuple)": FunctionFragment;
    "executeInstant(tuple)": FunctionFragment;
    "getOperationState(bytes32)": FunctionFragment;
    "hashOperation(tuple)": FunctionFragment;
    "isOperation(bytes32)": FunctionFragment;
    "isOperationDone(bytes32)": FunctionFragment;
    "isOperationPending(bytes32)": FunctionFragment;
    "isOperationReady(bytes32)": FunctionFragment;
    "minDelay()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "scheduleShadow(bytes32,uint256)": FunctionFragment;
    "scheduleTransparent(tuple,uint256)": FunctionFragment;
    "securityCouncil()": FunctionFragment;
    "timestamps(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDelay(uint256)": FunctionFragment;
    "updateSecurityCouncil(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeInstant",
    values: [
      {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [
      {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperationDone",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperationPending",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperationReady",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "minDelay", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleShadow",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransparent",
    values: [
      {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "securityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestamps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSecurityCouncil",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeInstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperationDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperationPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperationReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleShadow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransparent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSecurityCouncil",
    data: BytesLike
  ): Result;

  events: {
    "ChangeMinDelay(uint256,uint256)": EventFragment;
    "ChangeSecurityCouncil(address,address)": EventFragment;
    "OperationCancelled(bytes32)": EventFragment;
    "OperationExecuted(bytes32)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ShadowOperationScheduled(bytes32,uint256)": EventFragment;
    "TransparentOperationScheduled(bytes32,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeMinDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSecurityCouncil"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShadowOperationScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransparentOperationScheduled"
  ): EventFragment;
}

export class Governance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernanceInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    cancel(_id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "cancel(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeInstant(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeInstant((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOperationState(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getOperationState(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    hashOperation(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hashOperation((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOperation(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperation(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOperationDone(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperationDone(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOperationPending(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperationPending(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOperationReady(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperationReady(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    minDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pendingOwner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    scheduleShadow(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleShadow(bytes32,uint256)"(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    scheduleTransparent(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleTransparent((tuple[],bytes32,bytes32),uint256)"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    securityCouncil(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "securityCouncil()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    timestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "timestamps(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDelay(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDelay(uint256)"(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSecurityCouncil(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSecurityCouncil(address)"(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  cancel(_id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "cancel(bytes32)"(
    _id: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute((tuple[],bytes32,bytes32))"(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeInstant(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeInstant((tuple[],bytes32,bytes32))"(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOperationState(_id: BytesLike, overrides?: CallOverrides): Promise<number>;

  "getOperationState(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  hashOperation(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOperation((tuple[],bytes32,bytes32))"(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  isOperation(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isOperation(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperationDone(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isOperationDone(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperationPending(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperationPending(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperationReady(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isOperationReady(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "minDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  scheduleShadow(
    _id: BytesLike,
    _delay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleShadow(bytes32,uint256)"(
    _id: BytesLike,
    _delay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  scheduleTransparent(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    _delay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleTransparent((tuple[],bytes32,bytes32),uint256)"(
    _operation: {
      calls: { target: string; value: BigNumberish; data: BytesLike }[];
      predecessor: BytesLike;
      salt: BytesLike;
    },
    _delay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  securityCouncil(overrides?: CallOverrides): Promise<string>;

  "securityCouncil()"(overrides?: CallOverrides): Promise<string>;

  timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "timestamps(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDelay(
    _newDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDelay(uint256)"(
    _newDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSecurityCouncil(
    _newSecurityCouncil: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSecurityCouncil(address)"(
    _newSecurityCouncil: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    cancel(_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    "cancel(bytes32)"(_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    execute(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "execute((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    executeInstant(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "executeInstant((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getOperationState(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "getOperationState(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    hashOperation(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOperation((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    isOperation(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isOperation(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperationDone(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperationDone(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperationPending(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperationPending(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperationReady(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperationReady(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "minDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    scheduleShadow(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "scheduleShadow(bytes32,uint256)"(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scheduleTransparent(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "scheduleTransparent((tuple[],bytes32,bytes32),uint256)"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    securityCouncil(overrides?: CallOverrides): Promise<string>;

    "securityCouncil()"(overrides?: CallOverrides): Promise<string>;

    timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "timestamps(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDelay(
      _newDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDelay(uint256)"(
      _newDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSecurityCouncil(
      _newSecurityCouncil: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSecurityCouncil(address)"(
      _newSecurityCouncil: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChangeMinDelay(_delayBefore: null, _delayAfter: null): EventFilter;

    ChangeSecurityCouncil(
      _securityCouncilBefore: null,
      _securityCouncilAfter: null
    ): EventFilter;

    OperationCancelled(_id: BytesLike | null): EventFilter;

    OperationExecuted(_id: BytesLike | null): EventFilter;

    OwnershipTransferStarted(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ShadowOperationScheduled(_id: BytesLike | null, delay: null): EventFilter;

    TransparentOperationScheduled(
      _id: BytesLike | null,
      delay: null,
      _operation: null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    cancel(_id: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "cancel(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeInstant(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeInstant((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOperationState(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOperationState(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOperation(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOperation((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperation(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isOperation(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperationDone(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperationDone(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperationPending(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperationPending(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperationReady(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperationReady(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "minDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    scheduleShadow(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "scheduleShadow(bytes32,uint256)"(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    scheduleTransparent(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "scheduleTransparent((tuple[],bytes32,bytes32),uint256)"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    securityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    "securityCouncil()"(overrides?: CallOverrides): Promise<BigNumber>;

    timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "timestamps(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDelay(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDelay(uint256)"(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSecurityCouncil(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSecurityCouncil(address)"(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    cancel(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeInstant(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeInstant((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOperationState(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOperationState(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOperation(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOperation((tuple[],bytes32,bytes32))"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperation(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperation(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperationDone(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperationDone(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperationPending(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperationPending(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperationReady(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperationReady(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    scheduleShadow(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleShadow(bytes32,uint256)"(
      _id: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    scheduleTransparent(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleTransparent((tuple[],bytes32,bytes32),uint256)"(
      _operation: {
        calls: { target: string; value: BigNumberish; data: BytesLike }[];
        predecessor: BytesLike;
        salt: BytesLike;
      },
      _delay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    securityCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "securityCouncil()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timestamps(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDelay(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDelay(uint256)"(
      _newDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSecurityCouncil(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSecurityCouncil(address)"(
      _newSecurityCouncil: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
