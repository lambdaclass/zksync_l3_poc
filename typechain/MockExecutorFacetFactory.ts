/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockExecutorFacet } from "./MockExecutorFacet";

export class MockExecutorFacetFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockExecutorFacet> {
    return super.deploy(overrides || {}) as Promise<MockExecutorFacet>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockExecutorFacet {
    return super.attach(address) as MockExecutorFacet;
  }
  connect(signer: Signer): MockExecutorFacetFactory {
    return super.connect(signer) as MockExecutorFacetFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockExecutorFacet {
    return new Contract(address, _abi, signerOrProvider) as MockExecutorFacet;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_batchNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_l2LogsTreeRoot",
        type: "bytes32",
      },
    ],
    name: "saveL2LogsRootHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x00010000000000020000000003010019000000600330027000000013033001970000000102200190000000220000c13d000000040230008c0000002c0000413d000000000201043b0000001502200197000000160220009c0000002c0000c13d0000000002000416000000000202004b0000002c0000c13d000000040230008a000000400220008c0000002c0000413d0000000402100370000000000202043b0000000b03000039000000000023041b00000000002004350000000f02000039000000200020043f0000002401100370000000000101043b000100000001001d00000000010000190045002e0000040f0000000102000029000000000021041b0000000001000019000000460001042e0000008001000039000000400010043f0000000001000416000000000101004b0000002c0000c13d0000002001000039000001000010044300000120000004430000001401000041000000460001042e000000000100001900000047000104300000001302000041000000130310009c00000000010280190000000003000414000000130430009c0000000002034019000000c0022002100000004001100210000000000121019f00000017011001c70000801002000039004500400000040f00000001022001900000003e0000613d000000000101043b000000000001042d0000000001000019000000470001043000000043002104230000000102000039000000000001042d0000000002000019000000000001042d0000004500000432000000460001042e0000004700010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008a75bb09000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000040000000000000000000000000ba957277d592d215420ff8fd4b381e6d98cec2c601f2c773f719bcb44a79098e";
