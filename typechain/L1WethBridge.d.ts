/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L1WethBridgeInterface extends ethers.utils.Interface {
  functions: {
    "allowList()": FunctionFragment;
    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "initialize(bytes[],address,address,uint256,uint256)": FunctionFragment;
    "isWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "l1WethAddress()": FunctionFragment;
    "l2Bridge()": FunctionFragment;
    "l2TokenAddress(address)": FunctionFragment;
    "l2WethAddress()": FunctionFragment;
    "zkSync()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allowList", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimFailedDeposit",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawal",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike[], string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l1WethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2Bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "l2WethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zkSync", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFailedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1WethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2WethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zkSync", data: BytesLike): Result;

  events: {
    "ClaimedFailedDeposit(address,address,uint256)": EventFragment;
    "DepositInitiated(bytes32,address,address,address,uint256)": EventFragment;
    "EthReceived(uint256)": EventFragment;
    "WithdrawalFinalized(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedFailedDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
}

export class L1WethBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L1WethBridgeInterface;

  functions: {
    allowList(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "allowList()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    claimFailedDeposit(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    deposit(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(address,address,uint256,uint256,uint256,address)"(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    finalizeWithdrawal(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "initialize(bytes[],address,address,uint256,uint256)"(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    isWithdrawalFinalized(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isWithdrawalFinalized(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l1WethAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    l2Bridge(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "l2Bridge()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<{
      l2Token: string;
      0: string;
    }>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<{
      l2Token: string;
      0: string;
    }>;

    l2WethAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "l2WethAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    zkSync(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "zkSync()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  allowList(overrides?: CallOverrides): Promise<string>;

  "allowList()"(overrides?: CallOverrides): Promise<string>;

  claimFailedDeposit(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BytesLike[],
    overrides?: CallOverrides
  ): Promise<void>;

  "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BytesLike[],
    overrides?: CallOverrides
  ): Promise<void>;

  deposit(
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxGasLimit: BigNumberish,
    _l2TxGasPerPubdataByte: BigNumberish,
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(address,address,uint256,uint256,uint256,address)"(
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxGasLimit: BigNumberish,
    _l2TxGasPerPubdataByte: BigNumberish,
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  finalizeWithdrawal(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _factoryDeps: BytesLike[],
    _l2WethAddress: string,
    _governor: string,
    _deployBridgeImplementationFee: BigNumberish,
    _deployBridgeProxyFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "initialize(bytes[],address,address,uint256,uint256)"(
    _factoryDeps: BytesLike[],
    _l2WethAddress: string,
    _governor: string,
    _deployBridgeImplementationFee: BigNumberish,
    _deployBridgeProxyFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  isWithdrawalFinalized(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWithdrawalFinalized(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1WethAddress(overrides?: CallOverrides): Promise<string>;

  "l1WethAddress()"(overrides?: CallOverrides): Promise<string>;

  l2Bridge(overrides?: CallOverrides): Promise<string>;

  "l2Bridge()"(overrides?: CallOverrides): Promise<string>;

  l2TokenAddress(_l1Token: string, overrides?: CallOverrides): Promise<string>;

  "l2TokenAddress(address)"(
    _l1Token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  l2WethAddress(overrides?: CallOverrides): Promise<string>;

  "l2WethAddress()"(overrides?: CallOverrides): Promise<string>;

  zkSync(overrides?: CallOverrides): Promise<string>;

  "zkSync()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowList(overrides?: CallOverrides): Promise<string>;

    "allowList()"(overrides?: CallOverrides): Promise<string>;

    claimFailedDeposit(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deposit(address,address,uint256,uint256,uint256,address)"(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeWithdrawal(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(bytes[],address,address,uint256,uint256)"(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isWithdrawalFinalized(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWithdrawalFinalized(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1WethAddress(overrides?: CallOverrides): Promise<string>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<string>;

    l2Bridge(overrides?: CallOverrides): Promise<string>;

    "l2Bridge()"(overrides?: CallOverrides): Promise<string>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    l2WethAddress(overrides?: CallOverrides): Promise<string>;

    "l2WethAddress()"(overrides?: CallOverrides): Promise<string>;

    zkSync(overrides?: CallOverrides): Promise<string>;

    "zkSync()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ClaimedFailedDeposit(
      to: string | null,
      l1Token: string | null,
      amount: null
    ): EventFilter;

    DepositInitiated(
      l2DepositTxHash: BytesLike | null,
      from: string | null,
      to: string | null,
      l1Token: null,
      amount: null
    ): EventFilter;

    EthReceived(amount: null): EventFilter;

    WithdrawalFinalized(
      to: string | null,
      l1Token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    allowList(overrides?: CallOverrides): Promise<BigNumber>;

    "allowList()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimFailedDeposit(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(address,address,uint256,uint256,uint256,address)"(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    finalizeWithdrawal(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "initialize(bytes[],address,address,uint256,uint256)"(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    isWithdrawalFinalized(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWithdrawalFinalized(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1WethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    l2Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    "l2Bridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2WethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "l2WethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    zkSync(overrides?: CallOverrides): Promise<BigNumber>;

    "zkSync()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allowList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFailedDeposit(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,address,uint256,uint256,uint256,address)"(
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawal(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(bytes[],address,address,uint256,uint256)"(
      _factoryDeps: BytesLike[],
      _l2WethAddress: string,
      _governor: string,
      _deployBridgeImplementationFee: BigNumberish,
      _deployBridgeProxyFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawalFinalized(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWithdrawalFinalized(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1WethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l2Bridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2WethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l2WethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zkSync(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zkSync()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
