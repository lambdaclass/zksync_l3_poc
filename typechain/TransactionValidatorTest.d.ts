/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TransactionValidatorTestInterface extends ethers.utils.Interface {
  functions: {
    "validateL1ToL2Transaction(tuple,uint256)": FunctionFragment;
    "validateUpgradeTransaction(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "validateL1ToL2Transaction",
    values: [
      {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUpgradeTransaction",
    values: [
      {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "validateL1ToL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUpgradeTransaction",
    data: BytesLike
  ): Result;

  events: {};
}

export class TransactionValidatorTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TransactionValidatorTestInterface;

  functions: {
    validateL1ToL2Transaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "validateL1ToL2Transaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes),uint256)"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    validateUpgradeTransaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "validateUpgradeTransaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes))"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  validateL1ToL2Transaction(
    _transaction: {
      txType: BigNumberish;
      from: BigNumberish;
      to: BigNumberish;
      gasLimit: BigNumberish;
      gasPerPubdataByteLimit: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: BigNumberish;
      nonce: BigNumberish;
      value: BigNumberish;
      reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
      data: BytesLike;
      signature: BytesLike;
      factoryDeps: BigNumberish[];
      paymasterInput: BytesLike;
      reservedDynamic: BytesLike;
    },
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "validateL1ToL2Transaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes),uint256)"(
    _transaction: {
      txType: BigNumberish;
      from: BigNumberish;
      to: BigNumberish;
      gasLimit: BigNumberish;
      gasPerPubdataByteLimit: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: BigNumberish;
      nonce: BigNumberish;
      value: BigNumberish;
      reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
      data: BytesLike;
      signature: BytesLike;
      factoryDeps: BigNumberish[];
      paymasterInput: BytesLike;
      reservedDynamic: BytesLike;
    },
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateUpgradeTransaction(
    _transaction: {
      txType: BigNumberish;
      from: BigNumberish;
      to: BigNumberish;
      gasLimit: BigNumberish;
      gasPerPubdataByteLimit: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: BigNumberish;
      nonce: BigNumberish;
      value: BigNumberish;
      reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
      data: BytesLike;
      signature: BytesLike;
      factoryDeps: BigNumberish[];
      paymasterInput: BytesLike;
      reservedDynamic: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  "validateUpgradeTransaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes))"(
    _transaction: {
      txType: BigNumberish;
      from: BigNumberish;
      to: BigNumberish;
      gasLimit: BigNumberish;
      gasPerPubdataByteLimit: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymaster: BigNumberish;
      nonce: BigNumberish;
      value: BigNumberish;
      reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
      data: BytesLike;
      signature: BytesLike;
      factoryDeps: BigNumberish[];
      paymasterInput: BytesLike;
      reservedDynamic: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    validateL1ToL2Transaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateL1ToL2Transaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes),uint256)"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUpgradeTransaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "validateUpgradeTransaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes))"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    validateL1ToL2Transaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateL1ToL2Transaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes),uint256)"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateUpgradeTransaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateUpgradeTransaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes))"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validateL1ToL2Transaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateL1ToL2Transaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes),uint256)"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateUpgradeTransaction(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateUpgradeTransaction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[4],bytes,bytes,uint256[],bytes,bytes))"(
      _transaction: {
        txType: BigNumberish;
        from: BigNumberish;
        to: BigNumberish;
        gasLimit: BigNumberish;
        gasPerPubdataByteLimit: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymaster: BigNumberish;
        nonce: BigNumberish;
        value: BigNumberish;
        reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        data: BytesLike;
        signature: BytesLike;
        factoryDeps: BigNumberish[];
        paymasterInput: BytesLike;
        reservedDynamic: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
