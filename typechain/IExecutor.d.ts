/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IExecutorInterface extends ethers.utils.Interface {
  functions: {
    "commitBatches(tuple,tuple[])": FunctionFragment;
    "executeBatches(tuple[])": FunctionFragment;
    "getName()": FunctionFragment;
    "proveBatches(tuple,tuple[],tuple)": FunctionFragment;
    "revertBatches(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitBatches",
    values: [
      {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatches",
    values: [
      {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveBatches",
    values: [
      {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBatches",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBatches",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint256,bytes32,bytes32)": EventFragment;
    "BlockExecution(uint256,bytes32,bytes32)": EventFragment;
    "BlocksRevert(uint256,uint256,uint256)": EventFragment;
    "BlocksVerification(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksVerification"): EventFragment;
}

export class IExecutor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IExecutorInterface;

  functions: {
    commitBatches(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBatches(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBatches(tuple[])"(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proveBatches(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revertBatches(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertBatches(uint256)"(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  commitBatches(
    _lastCommittedBatchData: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBatchesData: {
      batchNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      bootloaderHeapInitialContentsHash: BytesLike;
      eventsQueueStateHash: BytesLike;
      systemLogs: BytesLike;
      totalL2ToL1Pubdata: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
    _lastCommittedBatchData: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBatchesData: {
      batchNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      bootloaderHeapInitialContentsHash: BytesLike;
      eventsQueueStateHash: BytesLike;
      systemLogs: BytesLike;
      totalL2ToL1Pubdata: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBatches(
    _batchesData: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBatches(tuple[])"(
    _batchesData: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  proveBatches(
    _prevBatch: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBatches: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
    _prevBatch: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBatches: {
      batchNumber: BigNumberish;
      batchHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revertBatches(
    _newLastBatch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertBatches(uint256)"(
    _newLastBatch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    commitBatches(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatches(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBatches(tuple[])"(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    proveBatches(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    revertBatches(
      _newLastBatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertBatches(uint256)"(
      _newLastBatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BlockCommit(
      batchNumber: BigNumberish | null,
      batchHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlockExecution(
      batchNumber: BigNumberish | null,
      batchHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlocksRevert(
      totalBatchesCommitted: null,
      totalBatchesVerified: null,
      totalBatchesExecuted: null
    ): EventFilter;

    BlocksVerification(
      previousLastVerifiedBatch: BigNumberish | null,
      currentLastVerifiedBatch: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    commitBatches(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeBatches(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBatches(tuple[])"(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    proveBatches(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    revertBatches(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertBatches(uint256)"(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitBatches(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBatchData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBatchesData: {
        batchNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        bootloaderHeapInitialContentsHash: BytesLike;
        eventsQueueStateHash: BytesLike;
        systemLogs: BytesLike;
        totalL2ToL1Pubdata: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBatches(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBatches(tuple[])"(
      _batchesData: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveBatches(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBatch: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBatches: {
        batchNumber: BigNumberish;
        batchHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revertBatches(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertBatches(uint256)"(
      _newLastBatch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
